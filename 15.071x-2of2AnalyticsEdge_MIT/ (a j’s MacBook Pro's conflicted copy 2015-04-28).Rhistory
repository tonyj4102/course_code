WHO = read.csv("WHO.csv")
str(WHO)
setwd("~/Dropbox/1_projects/MIT_Analyticsedge")
WHO = read.csv("WHO.csv")
str(WHO)
plot(WHO$GNI, WHO$FertilityRate)
plot(WHO$GNI, WHO$FertilityRate)
# Let's redo this using ggplot
install.packages("ggplot2")
library(ggplot2)
scatterplot = ggplot(WHO, aes(x = GNI, y = FertilityRate))
scatterplot + geom_point()
scatterplot + geom_line()
scatterplot + geom_point()
scatterplot + geom_point(color = "blue", size = 3, shape = 17)
scatterplot + geom_point(color = "darkred", size = 3, shape = 8)
scatterplot + geom_point(colour = "blue", size = 3, shape = 17) + ggtitle("Fertility Rate vs. Gross National Income")
fertilityGNIplot = scatterplot + geom_point(colour = "blue", size = 3, shape = 17) + ggtitle("Fertility Rate vs. Gross National Income")
pdf("MyPlot.pdf")
print(fertilityGNIplot)
scatterplot + geom_point(color = "darkred", size = 3, shape = 15)
scatterplot + geom_point(color = "darkred", size = 3, shape = 15)
scatterplot + geom_point()
WHO = read.csv("WHO.csv")
str(WHO)
# Plot from Week 1
plot(WHO$GNI, WHO$FertilityRate)
# Let's redo this using ggplot
# Install and load the ggplot2 library:
scatterplot = ggplot(WHO, aes(x = GNI, y = FertilityRate))
# Add the geom_point geometry
scatterplot + geom_point()
scatterplot + geom_point(color = "blue", size = 3, shape = 17)
# Another option:
scatterplot + geom_point(color = "darkred", size = 3, shape = 15)
# Add a title to the plot:
scatterplot + geom_point(colour = "blue", size = 3, shape = 17) + ggtitle("Fertility Rate vs. Gross National Income")
# Save our plot:
fertilityGNIplot = scatterplot + geom_point(colour = "blue", size = 3, shape = 17) + ggtitle("Fertility Rate vs. Gross National Income")
pdf("MyPlot.pdf")
print(fertilityGNIplot)
dev.off()
scatterplot + geom_point(color = "blue", size = 3, shape = 17)
# Another option:
scatterplot + geom_point(color = "darkred", size = 3, shape = 15)
# Color the points by region:
ggplot(WHO, aes(x = GNI, y = FertilityRate, color = Region)) + geom_point()
scatterplot + geom_point(colour = "blue", size = 3, shape = 17) + ggtitle("Fertility Rate vs. Gross National Income")
scatterplot + geom_point(color = "darkred", size = 3, shape = 15)
scatterplot + geom_point(color = "blue", size = 3, shape = 17)
plot(WHO$GNI, WHO$FertilityRate)
ggplot(WHO, aes(x = FertilityRate, y = Under15)) + geom_point()
ggplot(WHO, aes(x = FertilityRate, y = Under15)) + geom_point() + scale_color_brewer(palette="Dark2")
ggplot(WHO, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = "lm", colour = "orange")
ggplot(WHO, aes(x = FertilityRate, y = Under15)) + geom_point()
ggplot(WHO, aes(x = FertilityRate, y = Under15)) + geom_point() + scale_color_brewer(palette="Dark2")
ggplot(WHO, aes(x = FertilityRate, y = Under15)) + geom_point()
ggplot(WHO, aes(x = FertilityRate, y = Under15)) + geom_point() + scale_color_brewer(palette="Dark2")
ggplot(WHO, aes(x = FertilityRate, y = Under15,color = Region)) + geom_point()
mvt = read.csv("mvt.csv", stringsAsFactors=FALSE)
str(mvt)
mvt$Date = strptime(mvt$Date, format="%m/%d/%y %H:%M")
# Extract the hour and the day of the week:
mvt$Weekday = weekdays(mvt$Date)
mvt$Hour = mvt$Date$hour
# Let's take a look at the structure of our data again:
str(mvt)
table(mvt$Weekday)
WeekdayCounts = as.data.frame(table(mvt$Weekday))
str(WeekdayCounts)
# Save this table as a data frame:
WeekdayCounts = as.data.frame(table(mvt$Weekday))
str(WeekdayCounts)
# Load the ggplot2 library:
library(ggplot2)
# Create our plot
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1))
WeekdayCounts$Var1 = factor(WeekdayCounts$Var1, ordered=TRUE, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday"))
# Try again:
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1))
mvt = read.csv("mvt.csv", stringsAsFactors=FALSE)
str(mvt)
# Convert the Date variable to a format that R will recognize:
mvt$Date = strptime(mvt$Date, format="%m/%d/%y %H:%M")
# Extract the hour and the day of the week:
mvt$Weekday = weekdays(mvt$Date)
mvt$Hour = mvt$Date$hour
# Let's take a look at the structure of our data again:
str(mvt)
# Create a simple line plot - need the total number of crimes on each day of the week. We can get this information by creating a table:
table(mvt$Weekday)
table(mvt$Weekday)
# Save this table as a data frame:
WeekdayCounts = as.data.frame(table(mvt$Weekday))
str(WeekdayCounts)
# Load the ggplot2 library:
library(ggplot2)
# Create our plot
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1))
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1))
# Make the "Var1" variable an ORDERED factor variable
WeekdayCounts$Var1 = factor(WeekdayCounts$Var1, ordered=TRUE, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday"))
# Try again:
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1))
# Change our x and y labels:
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1)) + xlab("Day of the Week") + ylab("Total Motor Vehicle Thefts")
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1), linetype=2)) + xlab("Day of the Week") + ylab("Total Motor Vehicle Thefts")
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1), linetype=2) + xlab("Day of the Week") + ylab("Total Motor Vehicle Thefts")
ggplot(WeekdayCounts, aes(x=Var1, y=Freq)) + geom_line(aes(group=1), alpha=0.3) + xlab("Day of the Week") + ylab("Total Motor Vehicle Thefts")
# Create a counts table for the weekday and hour:
table(mvt$Weekday, mvt$Hour)
# Save this to a data frame:
DayHourCounts = as.data.frame(table(mvt$Weekday, mvt$Hour))
# Save this to a data frame:
DayHourCounts = as.data.frame(table(mvt$Weekday, mvt$Hour))
# Save this to a data frame:
DayHourCounts = as.data.frame(table(mvt$Weekday, mvt$Hour))
str(DayHourCounts)
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1))
DayHourCounts$Hour = as.numeric(as.character(DayHourCounts$Var2))
# Create out plot:
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1))
# Change the colors
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1, color=Var1), size=2)
DayHourCounts$Type = ifelse((DayHourCounts$Var1 == "Sunday") | (DayHourCounts$Var1 == "Saturday"), "Weekend", "Weekday")
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1, color=Type), size=2)
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1, color=Var1), size=2)
# Separate the weekends from the weekdays:
DayHourCounts$Type = ifelse((DayHourCounts$Var1 == "Sunday") | (DayHourCounts$Var1 == "Saturday"), "Weekend", "Weekday")
# Redo our plot, this time coloring by Type:
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1, color=Type), size=2)
# Make the lines a little transparent:
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1, color=Type), size=2, alpha=0.5)
# Fix the order of the days:
DayHourCounts$Var1 = factor(DayHourCounts$Var1, ordered=TRUE, levels=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
ggplot(DayHourCounts, aes(x = Hour, y = Var1)) + geom_tile(aes(fill = Freq))
# Change the label on the legend, and get rid of the y-label:
ggplot(DayHourCounts, aes(x = Hour, y = Var1)) + geom_tile(aes(fill = Freq)) + scale_fill_gradient(name="Total MV Thefts") + theme(axis.title.y = element_blank())
# Change the color scheme
ggplot(DayHourCounts, aes(x = Hour, y = Var1)) + geom_tile(aes(fill = Freq)) + scale_fill_gradient(name="Total MV Thefts", low="white", high="red") + theme(axis.title.y = element_blank())
install.packages("maps")
install.packages("ggmap")
library(maps)
library(ggmap)
ggmap(chicago) + geom_point(data = mvt[1:100,], aes(x = Longitude, y = Latitude))
chicago = get_map(location = "chicago", zoom = 11)
# Look at the map
ggmap(chicago)
# Plot the first 100 motor vehicle thefts:
ggmap(chicago) + geom_point(data = mvt[1:100,], aes(x = Longitude, y = Latitude))
# Round our latitude and longitude to 2 digits of accuracy, and create a crime counts data frame for each area:
LatLonCounts = as.data.frame(table(round(mvt$Longitude,2), round(mvt$Latitude,2)))
str(LatLonCounts)
# Convert our Longitude and Latitude variable to numbers:
LatLonCounts$Long = as.numeric(as.character(LatLonCounts$Var1))
LatLonCounts$Lat = as.numeric(as.character(LatLonCounts$Var2))
# Plot these points on our map:
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x = Long, y = Lat, color = Freq, size=Freq))
ggmap(chicago) + geom_point(data = mvt[1:100,], aes(x = Longitude, y = Latitude))
ggmap(chicago) + geom_tile(data = LatLonCounts, aes(x = Long, y = Lat, alpha = Freq), fill="red")
LatLonCounts2 = subset(LatLonCounts,LatLonCounts$Freq > 0)
LatLonCounts2$Long = as.numeric(as.character(LatLonCounts2$Var1))
LatLonCounts2$Lat = as.numeric(as.character(LatLonCounts2$Var2))
# Plot these points on our map:
ggmap(chicago) + geom_point(data = LatLonCounts2, aes(x = Long, y = Lat, color = Freq, size=Freq))
# Change the color scheme:
ggmap(chicago) + geom_point(data = LatLonCounts2, aes(x = Long, y = Lat, color = Freq, size=Freq)) + scale_colour_gradient(low="yellow", high="red")
# We can also use the geom_tile geometry
ggmap(chicago) + geom_tile(data = LatLonCounts2, aes(x = Long, y = Lat, alpha = Freq), fill="red")
1638-686
murders = read.csv("murders.csv")
murders = read.csv("murders.csv")
str(murders)
# Load the map of the US
statesMap = map_data("state")
str(statesMap)
# Plot the map:
ggplot(statesMap, aes(x = long, y = lat, group = group)) + geom_polygon(fill = "white", color = "black")
murders$region = tolower(murders$State)
# Join the statesMap data and the murders data into one dataframe:
murderMap = merge(statesMap, murders, by="region")
str(murderMap)
# Plot the number of murder on our map of the United States:
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = Murders)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
murderMap$MurderRate = murderMap$Murders / murderMap$Population * 100000
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = Population)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
murderMap$MurderRate = murderMap$Murders / murderMap$Population * 100000
# Redo our plot with murder rate:
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
# Redo the plot, removing any states with murder rates above 10:
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend", limits = c(0,10))
str(statesMap)
str(murders)
gunOwnershipRate = murderMapGunOwnership/ murderMap$Population * 100000
murderMap$gunOwnershipRate = murderMapGunOwnership/ murderMap$Population * 100000
murderMap$gunOwnershipRate = murderMap$GunOwnership/ murderMap$Population * 100000
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = gunOwnershipRate)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
str(statesMap)
table(statesMap$group)
ggplot(statesMap, aes(x = long, y = lat, group = group)) + geom_polygon(fill = "white", color = "black")
polling=read.csv("PollingImputed.csv.")
polling=read.csv("PollingImputed.csv")
str(polling)
Train = subset(polling,polling$Year = 2004 & polling$Year = 2008)
Train = subset(polling,polling$Year == "2004" & polling$Year == "2008")
Test = subset(polling,polling$Year == "2012")
mod2 = glm(Republican~SurveyUSA+DiffCount, data=Train, family="binomial")
mod2 = glm(Republican~SurveyUSA+DiffCount, data=Train, family="binomial")
mod2 = glm(Republican~SurveyUSA+DiffCount, data=Train, family="binomial")
install.packages("glmnet")
library(glmnet)
mod2 = glm(Republican~SurveyUSA+DiffCount, data=Train, family="binomial")
sstr(Train)
str(Train)
mod2=glm(Republican~.,data=Train, family ="binomial")
str(Train)
head(Train)
mod2=glm(Republican~.,data=Train, family ="binomial")
mod2 = glm(Republican~SurveyUSA+DiffCount, data=Train, family="binomial")
Train2=as.vector(Train)
Test2=as.vector(Test)
mod2 = glm(Republican~SurveyUSA+DiffCount, data=Train2, family="binomial")
Train3=as.dataframe(Train)
Train3=as.data.frame(Train)
Test3=as.data.frame(Test)
mod2 = glm(Republican~SurveyUSA+DiffCount, data=Train2, family="binomial")
polling=read.csv("PollingImputed.csv")
Train = subset(polling,polling$Year == "2004" & polling$Year == "2008")
Test = subset(polling,polling$Year == "2012")
Train3=as.data.frame(Train)
Test3=as.data.frame(Test)
mod2 = glm(Republican~SurveyUSA+DiffCount, data=Train3, family="binomial")
summary(Train)
Train = subset(polling,polling$Year == "2004" & polling$Year == "2008")
polling=read.csv("PollingImputed.csv")
str(polling)
Train = subset(polling,Year == "2004" & Year == "2008")
Test = subset(polling,Year == "2012")
Train = subset(polling,Year == "2004" & Year == "2008")
Train = subset(polling,Year == 2004 & Year == 2008)
Train = subset(polling,Year == 2004 & 2008)
Test = subset(polling,Year == 2012)
mod2 = glm(Republican~SurveyUSA+DiffCount, data=Train, family="binomial")
TestPrediction = predict(mod2, newdata=Test, type="response")
TestPredictionBinary = as.numeric(TestPrediction > 0.5)
TestPredictionBinary = as.numeric(TestPrediction > 0.5)
predictionDataFrame = data.frame(TestPrediction, TestPredictionBinary, Test$State)
table(predictionDataFrame)
str(predictionDataFrame)
table(predictionDataFrame$TestPrediction)
table(predictionDataFrame$TestPredictionBinary)
mean(TestPridiction)
mean(TestPrediction)
str(statesMap)
predictionDataFrame$region = tolower(predictionDataFrame$Test.State)
predictionMap = merge(statesMap, predictionDataFrame, by = "region")
predictionMap = predictionMap[order(predictionMap$order),]
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary)) + geom_polygon(color = "black")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
summary(mod2)
?geom_polygon
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = Population, linetype=3)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
?geom_polygon
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction,linetype=3))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
?geom_polygon
edges=data.frame(read.csv("edges.csv"))
users=data.frame(read.csv("users.csv"))
str(edges)
str(users)
table(edges$V1,edges$V2)
table(edges$V1)
mean(table(edges$V1))
mean(table(edges$V2))
str(edges)
str(users)
edges2=edges
edges3V1=edges$V2
edges3V2=edges$V1
edges3$V1=edges$V2
edges3=edges$V2
str(edges3)
edges3$V2=edges$V1
str(edges3)
table(edges$V1)
table(edges$V1)+table(edges$V2)
table(edges$V2)
s1=table(edges$V1)
s2=table(edges$V2)
s1+s2
s1
s2
str(s1)
str(s2)
head(s1)
s2=data.frame(table(edges$V2))
s1=data.frame(table(edges$V1))
s2=data.frame(table(edges$V2))
str(s1)
str(s2)
s2$Var2=s2Var1
s2$Var2=s2$Var1
str(s2)
s2=data.frame(table(edges$V2))
str(s1)
str(s2)
s3 = merge(s1, s2, by="Var1")
str(s3)
s3$sum=s3$Freq.x + s3$Freq.y
str(s3)
mean(s3$sum)
str(edges)
mean(table(edges$V2,edges$V1))
counts=as.data.frame(table(edges$V2))
str(counts)
counts2=as.data.frame(table(edges$V1))
str(counts2)
str(counts)
str(counts2)
counttotal = merge(counts, counts2, by="Var1")
str(counttotal)
counttotal$total=counttotal$Freq.x+counttotal$Freq.y
str(counttotal)
mean(counttotal$total)
mean(table(edges$V2,edges$V1))/2
mean(counttotal$total)/2
str(users)
users2=subset(users, school!=0)
head(users)
summary(users)
table(users$school, users$locale)
str(users)
table(users$school, users$gender)
install.packages("igraph")
library("igraph")
install.packages("igraph")
library("igraph")
?graph.data.frame
g = graph.data.frame(edges, FALSE, users)
plot(g, vertex.size=5, vertex.label=NA)
friends10=subset(counttotal, total>10)
friends10=subset(counttotal, total>9)
friends10
str(users)
summary(g)
g
table(degree(g))
table(degree(g) >= 10)
V(g)$size = degree(g)/2+2
V(g)$size = degree(g)/2+2
plot(g, vertex.label=NA)
V(g)$size
V(g)$color = "black"
plot(g, vertex.label=NA)
V(g)$color[V(g)$gender == "A"] = "red"
plot(g, vertex.label=NA)
V(g)$color[V(g)$gender == "B"] = "gray"
plot(g, vertex.label=NA)
V(g)$color[V(g)$school == "AB"] = "red"
plot(g, vertex.label=NA)
V(g)$color[V(g)$school == "B"] = "gray"
V(g)$color[V(g)$school == "AB"] = "red"
plot(g, vertex.label=NA)
V(g)$color = "black"
V(g)$color[V(g)$school == "AB"] = "red"
plot(g, vertex.label=NA)
V(g)$color[V(g)$school == "B"] = "gray"
V(g)$color[V(g)$school == "AB"] = "red"
plot(g, vertex.label=NA)
V(g)$color[V(g)$school == "B"] = "gray"
V(g)$color[V(g)$school == "AB"] = "red"
plot(g, vertex.label=NA)
V(g)$color = "black"
V(g)$color[V(g)$school == "B"] = "gray"
plot(g, vertex.label=NA)
V(g)$color[V(g)$school == "B"] = "blue"
V(g)$color[V(g)$school == "AB"] = "red"
plot(g, vertex.label=NA)
V(g)$color = "black"
V(g)$color[V(g)$school == "A"] = "red"
V(g)$color[V(g)$school == "AB"] = "gray"
plot(g, vertex.label=NA)
V(g)$color = "black"
V(g)$color[V(g)$local == "A"] = "red"
V(g)$color[V(g)$local == "AB"] = "gray"
V(g)$color = "black"
V(g)$color = "black"
V(g)$color[V(g)$locale == "A"] = "red"
V(g)$color[V(g)$locale == "B"] = "gray"
V(g)$color = "black"
V(g)$color[V(g)$locale == "A"] = "red"
V(g)$color[V(g)$locale == "B"] = "gray"
V(g)$color = "black"
plot(g, vertex.label=NA)
V(g)$color[V(g)$locale == "A"] = "red"
plot(g, vertex.label=NA)
V(g)$color[V(g)$locale == "B"] = "gray"
plot(g, vertex.label=NA)
?igraph.plotting
g <- graph.ring(10)
g$layout <- layout.circle
plot(g)
tkplot(g)
rglplot(g)
g <- barabasi.game(100)
plot(g, layout=layout.fruchterman.reingold, vertex.size=4,
vertex.label.dist=0.5, vertex.color="red", edge.arrow.size=0.5)
g <- erdos.renyi.game(100, 1/100)
comps <- clusters(g)$membership
colbar <- rainbow(max(comps)+1)
V(g)$color <- colbar[comps+1]
plot(g, layout=layout.fruchterman.reingold, vertex.size=5, vertex.label=NA)
# plot communities in a graph
g <- graph.full(5) %du% graph.full(5) %du% graph.full(5)
g <- add.edges(g, c(1,6, 1,11, 6,11))
com <- spinglass.community(g, spins=5)
V(g)$color <- com$membership+1
g <- set.graph.attribute(g, "layout", layout.kamada.kawai(g))
plot(g, vertex.label.dist=1.5)
igraph.options(plot.layout=layout.reingold.tilford)
plot(graph.tree(20, 2))
plot(graph.tree(50, 3), vertex.size=3, vertex.label=NA)
tkplot(graph.tree(50, 2, mode="undirected"), vertex.size=10,
vertex.color="green")
tweets = read.csv("tweets.csv", stringsAsFactors=FALSE)   #extra argument  for text data
install.packages("tm")
library(tm)
install.packages("SnowballC")  #lets us use the tm package
library(SnowballC)
corpus = Corpus(VectorSource(tweets$Tweet))
corpus = tm_map(corpus, tolower)    #tolower=function in R
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, c("apple", stopwords("english")))  #id ones to remove =apple, english stop words
corpus <- tm_map(corpus, PlainTextDocument)
allTweets = DocumentTermMatrix(corpus)  #rows=documents, columns=words in tweets, #times word occurs in matrix
allTweets
install.packages("wordcloud")
library(wordcloud)
?wordcloud
str(allTweets)
wordcloud(colnames(allTweets), colsums(allTweets))
wordcloud(colnames(allTweets), colSums(allTweets))
wordcloud(colnames(allTweets), colSums(allTweets),scale=c(4,.5),min.freq=3,max.words=Inf,
wordcloud(colnames(allTweets), colSums(allTweets),scale=c(4,.5),min.freq=3,max.words=Inf, random.order=TRUE, random.color=FALSE, rot.per=.1,colors="black",ordered.colors=FALSE,use.r.layout=FALSE,fixed.asp=TRUE)
wordcloud(colnames(allTweets), colSums(allTweets),scale=c(4,.5),min.freq=3,max.words=Inf, random.order=TRUE, random.color=FALSE, rot.per=.1,colors="black",ordered.colors=FALSE,use.r.layout=FALSE,fixed.asp=TRUE))
wordcloud(colnames(allTweets), colSums(allTweets),scale=c(4,.5),min.freq=3,max.words=Inf, random.order=TRUE, random.color=FALSE, rot.per=.1,colors="black",ordered.colors=FALSE,use.r.layout=FALSE,fixed.asp=TRUE))
which.max(colnames(colSums(allTweets)))
(colnames(colSums(allTweets)))
colnames(colSums(allTweets))
colSums(allTweets)
docsnew=rbind((colnames(allTweets), colSums(allTweets)))
docsnew=rbind(colnames(allTweets),colSums(allTweets))
a=colnames(allTweets)
b=colSums(allTweets)
b=colSums(allTweets)
tweetsSparse = as.data.frame(as.matrix(allTweets))
str(tweetsSparse)
colSums(tweetSparse)
colSums(tweetsSparse)
findFreqTerms(allTweets, lowfreq=20)
colSums(tweetsSparse)
which.max(colSums(tweetsSparse))
wordcloud(colnames(tweetsSparse, colSums(tweetsSparse),scale=c(4,.5),min.freq=3,max.words=Inf, random.order=TRUE, random.color=FALSE, rot.per=.1,colors="black",ordered.colors=FALSE,use.r.layout=FALSE,fixed.asp=TRUE))
wordcloud(colnames(tweetsSparse, colSums(tweetsSparse),scale=c(8,.3),min.freq=2,max.words=100, random.order=T, rot.per=.15, colors=pal, vfont=c("sans serif","plain"))
wordcloud(colnames(tweetsSparse, colSums(tweetsSparse),scale=c(8,.3),min.freq=2,max.words=100, random.order=T, rot.per=.15, colors=pal, vfont=c("sans serif","plain")))
wordcloud(colnames(allTweets), colSums(allTweets),scale=c(4,.5),min.freq=3,max.words=Inf, random.order=TRUE, random.color=FALSE, rot.per=.1,colors="black",ordered.colors=FALSE,use.r.layout=FALSE,fixed.asp=TRUE))
wordcloud(colnames(allTweets), colSums(allTweets),scale=c(4,.5),min.freq=3,max.words=Inf, random.order=TRUE, random.color=FALSE, rot.per=.1,colors="black",ordered.colors=FALSE,use.r.layout=FALSE,fixed.asp=TRUE)
docsnew=rbind(colnames(allTweets),colSums(allTweets))
wordcloud(allTweets, colSums(allTweets),scale=c(4,.5),min.freq=3,max.words=Inf, random.order=TRUE, random.color=FALSE, rot.per=.1,colors="black",ordered.colors=FALSE,use.r.layout=FALSE,fixed.asp=TRUE)
wordcloud(tweetsSparse, colSums(tweetsSparse),scale=c(4,.5),min.freq=3,max.words=Inf, random.order=TRUE, random.color=FALSE, rot.per=.1,colors="black",ordered.colors=FALSE,use.r.layout=FALSE,fixed.asp=TRUE)
warnings()
wordcloud(colnames(allTweets), colSums(allTweets))
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, .25))
allTweets
allTweets2 = DocumentTermMatrix(corpus)  #rows=documents, columns=words in tweets, #times word occurs in matrix
allTweets = as.data.frame(as.matrix(allTweets2))
wordcloud(colnames(allTweets), colSums(allTweets))
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(RColorBrewer)
brewer.all()
brewer.pal()
display.brewer.all()
